# Project Euler Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
# NOT SOLVED
import math, sys, os


class PrimeFinder:
	def __init__(self):
		self.aPrime = []

	def addPrime(self,nPrime):
		self.aPrime.append(nPrime)

	def isPrime(self,nNumber):
		prime = True
		for number in self.aPrime:
			if number != nNumber:
				if (nNumber%number) == 0:
					prime = False
					break
		return prime

	def primeRange(self,nRange):
		i = 1
		while len(self.aPrime) < nRange:
			i += 1
			if self.isPrime(i):
				self.addPrime(i)
				print i

	def productPrimeArray(self):
		product = 1
		for i in self.aPrime:
			product *= i 
		return product

	def solution(self,nRange):
		self.primeRange(nRange)
		return self.productPrimeArray()

sumPrime = PrimeFinder()
print sumPrime.solution(4)