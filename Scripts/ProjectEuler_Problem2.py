# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
# URL: projecteuler.net/problem=2
# Username: Arjun.Kiran

# Work Thoughts
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,
# 0, E, 0, 0, E,  0,  0,  E,  0,  0,
# t1,t2,t3,t4,t5, t6,t7,  t8, t9, t10


import math


def fib(n):
	if n == 1:
		breturn = 1
	elif n == 2:
		breturn = 2
	else:
		breturn = fib(n-1) + fib(n-2)

	return breturn


class fibObject:
	"""A faster version of the fib function"""
	def __init__(self):
		self.terms = [0,1,2]

	def fib(self,n):
		if len(self.terms) > n:
			breturn = self.terms[n]
		else:
			breturn = self.fib(n-1) + self.fib(n-2)
			self.terms.append(breturn)

		return breturn

def main():
	obj = fibObject()
	term_Number = 2
	term_Value = obj.fib(term_Number) 
	sum = 0
	while(term_Value < 4000000):
		sum = sum + term_Value
		term_Number = term_Number + 3
		term_Value = obj.fib(term_Number)

	print sum

main()





    
# main()